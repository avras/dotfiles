global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
  synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
  try:
    first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
    return first != ignore
  except StopIteration:
    return False
endglobal

global !p
def fix_indent(snip):
    vim.eval('feedkeys("\<c-f>")')
endglobal


snippet template "Basic template" b
\documentclass[a4paper, 12pt]{article}
\usepackage[margin=0.5in]{geometry}
\usepackage{amsmath, amssymb}

\title{$1}
\author{Saravanan Vijayakumaran}

\begin{document}
\maketitle
 $0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
  $0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
  \centering
  \caption{${2:caption}}
  \label{tab:${3:label}}
  \begin{tabular}{${5:c}}
  $0${5/((?<=.)c|l|r)|./(?1: & )/g}
  \end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
  \centering
  ${2:\includegraphics[width=0.8\textwidth]{$3}}
  \caption{${4:$3}}
  \label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
  \item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
  \item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
  \item[$1] $0
\end{description}
endsnippet

post_expand "fix_indent(snip)"
snippet it "Individual item" b
\item $0
endsnippet

snippet frame "Beamer Frame" b
%% Frame %%
\begin{frame}{$1}
  \begin{itemize}
    \item $0
  \end{itemize}
\end{frame}

endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff $0
endsnippet

snippet $$ "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
  snip.rv = ' '
else:
  snip.rv = ''
`$2
endsnippet

snippet ali "Align" bA
\begin{align*}
  ${1:${VISUAL}}
\end{align*}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
  if stripped[i] == ')': depth += 1
  if stripped[i] == '(': depth -= 1
  if depth == 0: break;
  i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil$0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix}$0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix}$0
endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right)$0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right|$0
endsnippet

snippet lrd| "\| \|" i
\| ${1:${VISUAL}} \|$0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\}$0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right]$0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet

snippet 'z "zeta" wA
\zeta
endsnippet

context "math()"
snippet sum "sum" w
\sum_{$1}^{$2}$0
endsnippet

context "math()"
snippet int "int" w
\int_{$1}^{$2} $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
  \centering
  \begin{tikzpicture}
    \begin{axis}[
      xmin= ${2:-10}, xmax= ${3:10},
      ymin= ${4:-10}, ymax = ${5:10},
      axis lines = middle,
    ]
      \addplot[domain=$2:$3, samples=${6:100}]{$7};
    \end{axis}
  \end{tikzpicture}
  \caption{$8}
  \label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet the "theta" iA
\theta 
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\}$0
endsnippet

snippet || "mid" iA
 \mid 
endsnippet

snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

snippet NN "n" iA
\mathbb{N}
endsnippet

snippet Nn "cap" iA
\cap 
endsnippet

snippet UU "cup" iA
\cup 
endsnippet

snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" iA
\emptyset
endsnippet

snippet RR "real" iA
\mathbb{R}
endsnippet

snippet QQ "Q" iA
\mathbb{Q}
endsnippet

snippet ZZ "Z" iA
\mathbb{Z}
endsnippet

snippet FF "F" iA
\mathbb{F}
endsnippet

context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet bf "mathbf" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet tet "texttt" iA
\texttt{$1}$0
endsnippet

context "math()"
snippet gcd "gcd" iA
\gcd($1, $2)$0
endsnippet

context "math()"
snippet bmo "bmod" iA
\bmod $0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
  $1
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
  $1: $2 &\longrightarrow $3 \\\\
  $4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

# Plan-specific snippets

snippet day "New Day Entry" b
\labday{`date +%a`, `date +%b` `date +%d`, `date +%Y`}

$0
endsnippet

snippet exp "Experiment Entry" b
\experiment{$1}
\begin{itemize}
  \item $0
\end{itemize}

endsnippet

snippet tet "texttt"
\texttt{$1}$0
endsnippet

snippet tit "textit"
\textit{$1}$0
endsnippet

snippet vhref "Link with label"
\href{${VISUAL}}{$1}$0
endsnippet

snippet href "Link with label"
\href{$1}{$2}$0
endsnippet

snippet date "Date in dd/mm/yy format"
`date +%d`/`date +%m`/`date +%y`
endsnippet

# vim:ft=snippets
